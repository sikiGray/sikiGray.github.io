<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git基本操作01</title>
      <link href="/2019/09/14/gitnote/"/>
      <url>/2019/09/14/gitnote/</url>
      
        <content type="html"><![CDATA[<h4 id="一、基本操作01"><a href="#一、基本操作01" class="headerlink" title="一、基本操作01"></a>一、基本操作01</h4><p><strong>1、git init</strong></p><p>初始化，使用后目录添加.git文件，用来管理当前目录下的文件。</p><p><strong>2、git status</strong></p><p>查看git仓库的状态</p><p>Git对文件划分状态：</p><p>​    工作区：存放新增和修改的文件</p><p>​    暂存区：存放下次要提交的文件清单</p><p>​    git仓库：存放已提交的文件</p><p><strong>3、git add files</strong></p><p>将工作区里新修改的文件标记一下track,然后生成快照，记录下来，放到暂存区中。并不是直接提交到Git仓库中</p><p>​    工作区——&gt;暂存区</p><p><strong>4、git commit -m [“提交说明”]</strong></p><p>将暂存区中的文件(暂存区中的文件消失）提交到Git仓库中</p><p>​    暂存区——&gt;Git仓库</p><h4 id="二、基本操作02"><a href="#二、基本操作02" class="headerlink" title="二、基本操作02"></a>二、基本操作02</h4><p><strong>1、git help/git help [命令]</strong></p><p>查看命令的用法或作用</p><p><strong>2、git log</strong></p><p>查看项目的历史提交记录</p><p><strong>3、git log -[数字]</strong></p><p>仅查看最近几条提交记录</p><p><strong>4、git commit –amend</strong></p><p>(1)可以修改最近一次的提交说明</p><p>(2)可以将新的文件与最近的一次提交当作统一提交（如当你少提交了一个文件时，可以先将少提交的文件git add,然后使用git commit –amend命令，达到统一提交的目的）</p><p><strong>5、git add .</strong></p><p>将新的工作区文件全部添加到暂存区中</p><p><strong>6、git reset HEAD [文件名]</strong></p><p>将暂存区的某个文件移除</p><p><strong>7、git reset –soft HEAD~</strong></p><p>撤销最近一次commit操作，相应的文件重回暂存区</p><p><strong>7.1、git reset –soft [版本号]</strong></p><p>撤销该版本之前的所有commit操作，相应文件重回暂存区</p><p><strong>8、git reset –hard HEAD~</strong></p><p>撤销最近一次add和commit操作，并且对文件的修改也会消失（直接回退到上一个版本）</p><p><strong>8.1、git reset –hard [版本号]</strong></p><p>跳到到指定版本（可以是之前的版本，也可以是之后的版本，实质上是HEAD指针的移动），版本号可通过git log查看</p><h4 id="三、Git分支概念"><a href="#三、Git分支概念" class="headerlink" title="三、Git分支概念"></a>三、Git分支概念</h4><p>HEAD总是指向最近一次commit的文件，当你再次进行提交时，HEAD指向这次提交的文件，而这次提交的文件指向前一次提交的文件。</p><h4 id="四、Git分支的创建、切换、状态"><a href="#四、Git分支的创建、切换、状态" class="headerlink" title="四、Git分支的创建、切换、状态"></a>四、Git分支的创建、切换、状态</h4><p><strong>1、git branch</strong></p><p>展示所有的分支，当前所在分支前有*</p><p><strong>2、git branch [新分支名称]</strong></p><p>创建一个新的分支，该分支指向最后一个commit的对象，但HEAD的指向不变</p><p><strong>3、git checkout [分支名称]</strong></p><p>切换分支，即改变HEAD指向的分支</p><h4 id="五、分支的合并"><a href="#五、分支的合并" class="headerlink" title="五、分支的合并"></a>五、分支的合并</h4><p>master分支为主分支，一般不用来开发，主要用来合并其他分支<br>分支的创建与所在目录无关</p><p><strong>1、git checkout -b [新分支名称]</strong></p><p>直接创建一个新的分支，并切换到这个分支，相当于：</p><p>​    git branch [新分支名称]</p><p>​    git checkout [新分支名称]</p><p><strong>2、git merge [分支名称]</strong></p><p>将主分支合并到该分支上</p><p><strong>3、git branch -d [分支名称]</strong></p><p>删除这个分支</p><p>（总结）合并分支的过程：</p><p>​    1、切换回master分支上     git checkout master</p><p>​    2、合并master分支与要合并的分支    git merge [次分支名称]</p><p>​    3、删除要合并的次要分支    git branch -d [次要分支名称]</p><h4 id="六、Git分支的暂存"><a href="#六、Git分支的暂存" class="headerlink" title="六、Git分支的暂存"></a>六、Git分支的暂存</h4><p>&emsp;当我们在一个分支修改文件时，如果修改后未提交，则我们无法切换到其他分支，为解决这个问题，使用Git中文件暂存的命令</p><p><strong>1、git stash</strong></p><p>可以使修改后未提交的文件，暂时“隐藏”起来，使得我们可以在此时切换分支</p><p><strong>2、git stash apply</strong></p><p>可以使最近一次暂存的文件复原，得以继续进行工作</p><p><strong>3、git stash apply [暂存编号]</strong></p><p>可以使制定的暂存文件复原</p><p><strong>4、git stash list</strong></p><p>将所有暂存的文件列出来，可以看到它们的暂存编号</p><h4 id="七、解决Git分支合并冲突"><a href="#七、解决Git分支合并冲突" class="headerlink" title="七、解决Git分支合并冲突"></a>七、解决Git分支合并冲突</h4><p>&emsp;当次要分支同时对同一个文件进行修改后，在合并过程中会出现冲突</p><p>解决方法如下：</p><p>​    打开有冲突的文件，选择要保留的内容，即可解决冲突。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/14/hello-world/"/>
      <url>/2019/09/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
