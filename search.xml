<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>渐近时间复杂度</title>
      <link href="/2019/09/16/shu-ju-jie-gou-suan-fa-de-jian-jin-fen-xi-jian-jin-shi-jian-fu-za-du/"/>
      <url>/2019/09/16/shu-ju-jie-gou-suan-fa-de-jian-jin-fen-xi-jian-jin-shi-jian-fu-za-du/</url>
      
        <content type="html"><![CDATA[<h1 id="渐进的时间复杂度"><a href="#渐进的时间复杂度" class="headerlink" title="渐进的时间复杂度"></a>渐进的时间复杂度</h1><p>&emsp;计算程序步数的目的是想比较两个或多个完成相同功能的程序的时间复杂度，并估计当问题规模变化时，程序的运行时间如何随之变化。<br>&emsp;要确定一个程序的准确的程序步数是非常困难的，而且也不是很必要。因为程序步数这个概念本身不是一个精确的概念。例如，赋值语句 x=a 和 x=a+b*(c-d)-e/f 居然具有相同的程序步数。<br>&emsp;由于程序步数不能确切的反映运行时间，所以用精确的程序步数来比较两个程序，其结果不一定有价值。前面讨论迭代求和程序与递归求和程序的程序步数时，程序步数为 3n+2 的程序反而比程序步数为 3n+4 的程序运行时间多。但是，当两个程序的程序步数相差很大时，例如一个是 $\lceil\log_2(n+1)\rceil$,另一个是 $n(n-1)/2$ 时，明显后者比前者运行时间多。<br>&emsp;因此，如果精确计算有困难，我们只要能够得出一个是 $\log_2n$ 的数量级，一个是  $n^2$ 的数量级，后者比前者运行时间多的结论，也能达到分析的目的。</p><h1 id="大-O-渐进表示"><a href="#大-O-渐进表示" class="headerlink" title="大 $O$ 渐进表示"></a>大 $O$ 渐进表示</h1><p>&emsp; 要全面分析一个算法，需要考虑算法在最坏情况下的时间代价，在最后情况下的时间代价，在平均情况下的时间代价。<strong>对于最坏情况</strong>，主要采用大 $O$ 表示法来描述。<br>&emsp; 大 $O$ 表示法的一般前提是：当且仅当存在正整数 $c$ 和 $n_0$,使得 $T(n)\leq cf(n)$，使得所有的 $n\geq n_0$ 成立，则称该算法的时间增长率在 $O(f(n))$ 中，记为 $T(n)=O(f(n))$ 。<br>&emsp; 使用大 $O$ 表示法时需要考虑关键操作的程序步数。如果最后需要给出的时渐进值，可直接考虑关键操作的程序步数，找出其与 $n$ 的函数关系 $f(n)$ ，从而得到渐进时间复杂度。</p><p>接下来，根据大 $O$ 表示法来看看接下来的例子。<br>1、（线性函数）考察 $T(n)=3n+2$。<br>$$T(n)=O(n)$$<br>2、（平方函数）考察 $T(n)=10n^2+4n+2$<br>$$T(n)=O(n^2)$$<br>3、（指数函数）考察 $T(n)=6*2^n+n^2$<br>$$T(n)=O(2^n)$$<br>4、（常数函数）考察 $T(n)=9$<br>$$T(n)=O(1)$$</p><p><strong>为了更好在具体情况下使用大 $O$ 表示法，我们需要知道大 $O$ 表示法的几个规则。</strong></p><p><strong>1、加法规则：</strong> 当两个并列的的程序段的时间代价分别为为 $T_1(n)=O(f(n))$ 和 $T_2(m)=O(g(m))$ 时，那么将两个程序段连在一起后整个程序段的时间代价为<br>$$T(n,m)=T_1(n)+T_2(m)=O(\max {f(n),g(m)} )$$<br>所谓 $\max{f(n),g(m)}$ 是指当 $n$ 和 $m$ 充分大时取 $f(n)$ 与 $g(m)$ 中的最大值。在这个意义下显然有如下关系：<br>$$c&lt;\log_2n&lt;n&lt;n\log_2n&lt;n^2&lt;n^3&lt;2^n&lt;3^n&lt;n!$$</p><p>示例如下</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//程序 1.26    计算渐进时间复杂度的程序示例</span><span class="token keyword">void</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">float</span> sum<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//计算第 i 行的元素和</span>        <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Line"</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">":"</span><span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//打印第 i 行的累加和</span><span class="token punctuation">}</span></code></pre><p>根据加法规则，该程序的渐进时间复杂度为 $O(\max{m\times n,m})$ 。</p><p><strong>2、乘法规则：</strong> 如果存在多层的嵌套循环，关键操作应在最内层循环中。先自外向内层层分析每层循环的渐进时间复杂度，然后利用大 $O$ 表示法来计算其渐进时间复杂度。也就是说，当两个嵌套的程序段的时间代价分别是 $T_1(n)=O(f(n))$ 和 $T_2(m)=O(g(m))$ 时，那么整个时间段的时间代价为<br>$$T(n,m)=T_1(n)\times T_2(m)=O(f(n)\times g(m))$$</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本操作01</title>
      <link href="/2019/09/14/gitnote/"/>
      <url>/2019/09/14/gitnote/</url>
      
        <content type="html"><![CDATA[<h4 id="一、基本操作01"><a href="#一、基本操作01" class="headerlink" title="一、基本操作01"></a>一、基本操作01</h4><p><strong>1、git init</strong></p><p>初始化，使用后目录添加.git文件，用来管理当前目录下的文件。</p><p><strong>2、git status</strong></p><p>查看git仓库的状态</p><p>Git对文件划分状态：</p><p>​    工作区：存放新增和修改的文件</p><p>​    暂存区：存放下次要提交的文件清单</p><p>​    git仓库：存放已提交的文件</p><p><strong>3、git add files</strong></p><p>将工作区里新修改的文件标记一下track,然后生成快照，记录下来，放到暂存区中。并不是直接提交到Git仓库中</p><p>​    工作区——&gt;暂存区</p><p><strong>4、git commit -m [“提交说明”]</strong></p><p>将暂存区中的文件(暂存区中的文件消失）提交到Git仓库中</p><p>​    暂存区——&gt;Git仓库</p><h4 id="二、基本操作02"><a href="#二、基本操作02" class="headerlink" title="二、基本操作02"></a>二、基本操作02</h4><p><strong>1、git help/git help [命令]</strong></p><p>查看命令的用法或作用</p><p><strong>2、git log</strong></p><p>查看项目的历史提交记录</p><p><strong>3、git log -[数字]</strong></p><p>仅查看最近几条提交记录</p><p><strong>4、git commit –amend</strong></p><p>(1)可以修改最近一次的提交说明</p><p>(2)可以将新的文件与最近的一次提交当作统一提交（如当你少提交了一个文件时，可以先将少提交的文件git add,然后使用git commit –amend命令，达到统一提交的目的）</p><p><strong>5、git add .</strong></p><p>将新的工作区文件全部添加到暂存区中</p><p><strong>6、git reset HEAD [文件名]</strong></p><p>将暂存区的某个文件移除</p><p><strong>7、git reset –soft HEAD~</strong></p><p>撤销最近一次commit操作，相应的文件重回暂存区</p><p><strong>7.1、git reset –soft [版本号]</strong></p><p>撤销该版本之前的所有commit操作，相应文件重回暂存区</p><p><strong>8、git reset –hard HEAD~</strong></p><p>撤销最近一次add和commit操作，并且对文件的修改也会消失（直接回退到上一个版本）</p><p><strong>8.1、git reset –hard [版本号]</strong></p><p>跳到到指定版本（可以是之前的版本，也可以是之后的版本，实质上是HEAD指针的移动），版本号可通过git log查看</p><h4 id="三、Git分支概念"><a href="#三、Git分支概念" class="headerlink" title="三、Git分支概念"></a>三、Git分支概念</h4><p>HEAD总是指向最近一次commit的文件，当你再次进行提交时，HEAD指向这次提交的文件，而这次提交的文件指向前一次提交的文件。</p><h4 id="四、Git分支的创建、切换、状态"><a href="#四、Git分支的创建、切换、状态" class="headerlink" title="四、Git分支的创建、切换、状态"></a>四、Git分支的创建、切换、状态</h4><p><strong>1、git branch</strong></p><p>展示所有的分支，当前所在分支前有*</p><p><strong>2、git branch [新分支名称]</strong></p><p>创建一个新的分支，该分支指向最后一个commit的对象，但HEAD的指向不变</p><p><strong>3、git checkout [分支名称]</strong></p><p>切换分支，即改变HEAD指向的分支</p><h4 id="五、分支的合并"><a href="#五、分支的合并" class="headerlink" title="五、分支的合并"></a>五、分支的合并</h4><p>master分支为主分支，一般不用来开发，主要用来合并其他分支<br>分支的创建与所在目录无关</p><p><strong>1、git checkout -b [新分支名称]</strong></p><p>直接创建一个新的分支，并切换到这个分支，相当于：</p><p>​    git branch [新分支名称]</p><p>​    git checkout [新分支名称]</p><p><strong>2、git merge [分支名称]</strong></p><p>将主分支合并到该分支上</p><p><strong>3、git branch -d [分支名称]</strong></p><p>删除这个分支</p><p>（总结）合并分支的过程：</p><p>​    1、切换回master分支上     git checkout master</p><p>​    2、合并master分支与要合并的分支    git merge [次分支名称]</p><p>​    3、删除要合并的次要分支    git branch -d [次要分支名称]</p><h4 id="六、Git分支的暂存"><a href="#六、Git分支的暂存" class="headerlink" title="六、Git分支的暂存"></a>六、Git分支的暂存</h4><p>&emsp;当我们在一个分支修改文件时，如果修改后未提交，则我们无法切换到其他分支，为解决这个问题，使用Git中文件暂存的命令</p><p><strong>1、git stash</strong></p><p>可以使修改后未提交的文件，暂时“隐藏”起来，使得我们可以在此时切换分支</p><p><strong>2、git stash apply</strong></p><p>可以使最近一次暂存的文件复原，得以继续进行工作</p><p><strong>3、git stash apply [暂存编号]</strong></p><p>可以使制定的暂存文件复原</p><p><strong>4、git stash list</strong></p><p>将所有暂存的文件列出来，可以看到它们的暂存编号</p><h4 id="七、解决Git分支合并冲突"><a href="#七、解决Git分支合并冲突" class="headerlink" title="七、解决Git分支合并冲突"></a>七、解决Git分支合并冲突</h4><p>&emsp;当次要分支同时对同一个文件进行修改后，在合并过程中会出现冲突</p><p>解决方法如下：</p><p>​    打开有冲突的文件，选择要保留的内容，即可解决冲突。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/14/hello-world/"/>
      <url>/2019/09/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
